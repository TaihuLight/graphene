diff -ruNp musl-1.1.16/arch/x86_64/syscall_arch.h musl-1.1.16.new/arch/x86_64/syscall_arch.h
--- musl-1.1.16/arch/x86_64/syscall_arch.h	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/arch/x86_64/syscall_arch.h	2018-01-30 15:40:59.805375694 -0800
@@ -1,24 +1,26 @@
 #define __SYSCALL_LL_E(x) (x)
 #define __SYSCALL_LL_O(x) (x)
 
+#include <syscalldb.h>
+
 static __inline long __syscall0(long n)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n) : "rcx", "r11", "memory");
 	return ret;
 }
 
 static __inline long __syscall1(long n, long a1)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
 	return ret;
 }
 
 static __inline long __syscall2(long n, long a1, long a2)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
 						  : "rcx", "r11", "memory");
 	return ret;
 }
@@ -26,7 +28,7 @@ static __inline long __syscall2(long n,
 static __inline long __syscall3(long n, long a1, long a2, long a3)
 {
 	unsigned long ret;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
 						  "d"(a3) : "rcx", "r11", "memory");
 	return ret;
 }
@@ -35,7 +37,7 @@ static __inline long __syscall4(long n,
 {
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
 						  "d"(a3), "r"(r10): "rcx", "r11", "memory");
 	return ret;
 }
@@ -45,7 +47,7 @@ static __inline long __syscall5(long n,
 	unsigned long ret;
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
 						  "d"(a3), "r"(r10), "r"(r8) : "rcx", "r11", "memory");
 	return ret;
 }
@@ -56,7 +58,7 @@ static __inline long __syscall6(long n,
 	register long r10 __asm__("r10") = a4;
 	register long r8 __asm__("r8") = a5;
 	register long r9 __asm__("r9") = a6;
-	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
+	__asm__ __volatile__ (SYSCALLDB : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
 						  "d"(a3), "r"(r10), "r"(r8), "r"(r9) : "rcx", "r11", "memory");
 	return ret;
 }
diff -ruNp musl-1.1.16/arch/x86_64/syscalldb.h musl-1.1.16.new/arch/x86_64/syscalldb.h
--- musl-1.1.16/arch/x86_64/syscalldb.h	1969-12-31 16:00:00.000000000 -0800
+++ musl-1.1.16.new/arch/x86_64/syscalldb.h	2018-01-30 15:40:59.805375694 -0800
@@ -0,0 +1,24 @@
+#ifndef _SYSCALLDB_H_
+#define _SYSCALLDB_H_
+
+#ifndef __ASSEMBLER__
+
+#define SYSCALLDB							      \
+	"subq $128, %%rsp\n\t"						      \
+	"pushq %%rbx\n\t"						      \
+	"movq syscalldb@GOTPCREL(%%rip), %%rbx\n\t"			      \
+	"callq *%%rbx\n\t"						      \
+	"popq %%rbx\n\t"						      \
+	"addq $128, %%rsp\n\t"
+
+#define SYSCALLDB_ASM							      \
+	"movq syscalldb@GOTPCREL(%rip), %rbx\n\t"			      \
+	"callq *%rbx\n\t"
+
+int register_library (const char * name, void * load_address);
+
+long int glibc_option (const char * opt);
+
+#endif /* Assembler */
+
+#endif /* _SYSCALLDB_H */
diff -ruNp musl-1.1.16/configure musl-1.1.16.new/configure
--- musl-1.1.16/configure	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/configure	2018-01-30 15:40:59.809375664 -0800
@@ -574,7 +574,7 @@ tryldflag LDFLAGS_AUTO -Wl,--hash-style=
 # libc.so will crash at runtime during relocation processing.
 # The common way this can happen is failure to link the compiler
 # runtime library; implementation error is also a possibility.
-tryldflag LDFLAGS_AUTO -Wl,--no-undefined
+tryldflag LDFLAGS_AUTO -Wl,--shlib-allow-undefined
 
 # Avoid exporting symbols from compiler runtime libraries. They
 # should be hidden anyway, but some toolchains including old gcc
diff -ruNp musl-1.1.16/ldso/dynlink.c musl-1.1.16.new/ldso/dynlink.c
--- musl-1.1.16/ldso/dynlink.c	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/ldso/dynlink.c	2018-01-30 15:40:59.809375664 -0800
@@ -20,6 +20,7 @@
 #include "pthread_impl.h"
 #include "libc.h"
 #include "dynlink.h"
+#include <glibc-version.h>
 
 static void error(const char *, ...);
 
@@ -131,6 +132,7 @@ static struct fdpic_loadmap *app_loadmap
 static struct fdpic_dummy_loadmap app_dummy_loadmap;
 
 struct debug *_dl_debug_addr = &debug;
+weak_alias(debug, __libc_r_debug);
 
 __attribute__((__visibility__("hidden")))
 void (*const __init_array_start)(void)=0, (*const __fini_array_start)(void)=0;
@@ -1016,6 +1018,9 @@ static struct dso *load_library(const ch
 	close(fd);
 	if (!map) return 0;
 
+	/* register the library to Graphene */
+	register_library(pathname, (void *) temp_dso.base);
+
 	/* Allocate storage for the new DSO. When there is TLS, this
 	 * storage must include a reservation for all pre-existing
 	 * threads to obtain copies of both the new TLS, and an
@@ -1250,7 +1255,7 @@ static void dl_debug_state(void)
 {
 }
 
-weak_alias(dl_debug_state, _dl_debug_state);
+weak_alias(dl_debug_state, __libc_debug_state);
 
 void __init_tls(size_t *auxv)
 {
@@ -1376,6 +1381,9 @@ void __dls2(unsigned char *base, size_t
 
 	ldso.relocated = 0;
 
+	/* register the ldso to Graphene */
+	register_library(ldso.name, (void *) ldso.base);
+
 	/* Call dynamic linker stage-3, __dls3, looking it up
 	 * symbolically as a barrier against moving the address
 	 * load across the above relocation processing. */
@@ -1504,6 +1512,8 @@ _Noreturn void __dls3(size_t *sp)
 			dprintf(2, "%s: %s: Not a valid dynamic program\n", ldname, argv[0]);
 			_exit(1);
 		}
+		/* register the library to Graphene */
+		register_library(argv[0], (void *) app.base);
 		runtime = 0;
 		close(fd);
 		ldso.name = ldname;
@@ -1633,7 +1643,7 @@ _Noreturn void __dls3(size_t *sp)
 	debug.head = head;
 	debug.base = ldso.base;
 	debug.state = 0;
-	_dl_debug_state();
+	__libc_debug_state();
 
 	errno = 0;
 
@@ -1724,7 +1734,7 @@ void *dlopen(const char *file, int mode)
 	}
 
 	update_tls_size();
-	_dl_debug_state();
+	__libc_debug_state();
 	orig_tail = tail;
 end:
 	__release_ptc();
diff -ruNp musl-1.1.16/Makefile musl-1.1.16.new/Makefile
--- musl-1.1.16/Makefile	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/Makefile	2018-01-30 15:40:59.809375664 -0800
@@ -46,7 +46,7 @@ CFLAGS_AUTO = -Os -pipe
 CFLAGS_C99FSE = -std=c99 -ffreestanding -nostdinc 
 
 CFLAGS_ALL = $(CFLAGS_C99FSE)
-CFLAGS_ALL += -D_XOPEN_SOURCE=700 -I$(srcdir)/arch/$(ARCH) -I$(srcdir)/arch/generic -Iobj/src/internal -I$(srcdir)/src/internal -Iobj/include -I$(srcdir)/include
+CFLAGS_ALL += -D_XOPEN_SOURCE=700 -I$(srcdir)/arch/$(ARCH) -I$(srcdir)/arch/generic -Iobj/src/internal -I$(srcdir)/src/internal -Iobj/include -I$(srcdir)/include -I../shim/include
 CFLAGS_ALL += $(CPPFLAGS) $(CFLAGS_AUTO) $(CFLAGS)
 
 LDFLAGS_ALL = $(LDFLAGS_AUTO) $(LDFLAGS)
diff -ruNp musl-1.1.16/src/internal/pthread_impl.h musl-1.1.16.new/src/internal/pthread_impl.h
--- musl-1.1.16/src/internal/pthread_impl.h	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/internal/pthread_impl.h	2018-01-30 15:40:59.809375664 -0800
@@ -9,6 +9,7 @@
 #include "syscall.h"
 #include "atomic.h"
 #include "futex.h"
+#include <shim_tls.h>
 
 #define pthread __pthread
 
@@ -17,6 +18,11 @@ struct pthread {
 	void **dtv, *unused1, *unused2;
 	uintptr_t sysinfo;
 	uintptr_t canary, canary2;
+	/* Compatible with glibc */
+	unsigned long int vgetcpu_cache[2];
+	int __glibc_reserved1;
+	/* For graphene, we reserve shim tcb in the libc tcb */
+	shim_tcb_t shim_tcb;
 	pid_t tid, pid;
 	int tsd_used, errno_val;
 	volatile int cancel, canceldisable, cancelasync;
diff -ruNp musl-1.1.16/src/internal/vis.h musl-1.1.16.new/src/internal/vis.h
--- musl-1.1.16/src/internal/vis.h	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/internal/vis.h	2018-01-30 15:40:59.809375664 -0800
@@ -22,6 +22,4 @@ extern long timezone, __timezone;
 __attribute__((__visibility__("default")))
 extern char *optarg, **environ, **__environ, *tzname[2], *__tzname[2], *__progname, *__progname_full;
 
-#pragma GCC visibility push(protected)
-
 #endif
diff -ruNp musl-1.1.16/src/internal/x86_64/syscall.s musl-1.1.16.new/src/internal/x86_64/syscall.s
--- musl-1.1.16/src/internal/x86_64/syscall.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/internal/x86_64/syscall.s	2018-01-30 15:40:59.809375664 -0800
@@ -9,5 +9,8 @@ __syscall:
 	movq %r8,%r10
 	movq %r9,%r8
 	movq 8(%rsp),%r9
-	syscall
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 	ret
diff -ruNp musl-1.1.16/src/process/x86_64/vfork.s musl-1.1.16.new/src/process/x86_64/vfork.s
--- musl-1.1.16/src/process/x86_64/vfork.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/process/x86_64/vfork.s	2018-01-30 15:40:59.809375664 -0800
@@ -6,7 +6,10 @@ __vfork:
 vfork:
 	pop %rdx
 	mov $58,%eax
-	syscall
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 	push %rdx
 	mov %rax,%rdi
 	jmp __syscall_ret
diff -ruNp musl-1.1.16/src/signal/x86_64/restore.s musl-1.1.16.new/src/signal/x86_64/restore.s
--- musl-1.1.16/src/signal/x86_64/restore.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/signal/x86_64/restore.s	2018-01-30 15:40:59.809375664 -0800
@@ -3,5 +3,6 @@
 .type __restore_rt,@function
 __restore_rt:
 	mov $15, %rax
-	syscall
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
 .size __restore_rt,.-__restore_rt
diff -ruNp musl-1.1.16/src/thread/x86_64/clone.s musl-1.1.16.new/src/thread/x86_64/clone.s
--- musl-1.1.16/src/thread/x86_64/clone.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/thread/x86_64/clone.s	2018-01-30 15:40:59.809375664 -0800
@@ -13,7 +13,10 @@ __clone:
 	and $-16,%rsi
 	sub $8,%rsi
 	mov %rcx,(%rsi)
-	syscall
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 	test %eax,%eax
 	jnz 1f
 	xor %ebp,%ebp
@@ -22,6 +25,7 @@ __clone:
 	mov %eax,%edi
 	xor %eax,%eax
 	mov $60,%al
-	syscall
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
 	hlt
 1:	ret
diff -ruNp musl-1.1.16/src/thread/x86_64/__set_thread_area.s musl-1.1.16.new/src/thread/x86_64/__set_thread_area.s
--- musl-1.1.16/src/thread/x86_64/__set_thread_area.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/thread/x86_64/__set_thread_area.s	2018-01-30 15:40:59.809375664 -0800
@@ -6,5 +6,8 @@ __set_thread_area:
 	mov %rdi,%rsi           /* shift for syscall */
 	movl $0x1002,%edi       /* SET_FS register */
 	movl $158,%eax          /* set fs segment to */
-	syscall                 /* arch_prctl(SET_FS, arg)*/
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 	ret
diff -ruNp musl-1.1.16/src/thread/x86_64/syscall_cp.s musl-1.1.16.new/src/thread/x86_64/syscall_cp.s
--- musl-1.1.16/src/thread/x86_64/syscall_cp.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/thread/x86_64/syscall_cp.s	2018-01-30 15:40:59.809375664 -0800
@@ -24,7 +24,10 @@ __cp_begin:
 	mov 8(%rsp),%r8
 	mov 16(%rsp),%r9
 	mov %r11,8(%rsp)
-	syscall
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 __cp_end:
 	ret
 __cp_cancel:
diff -ruNp musl-1.1.16/src/thread/x86_64/__unmapself.s musl-1.1.16.new/src/thread/x86_64/__unmapself.s
--- musl-1.1.16/src/thread/x86_64/__unmapself.s	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/src/thread/x86_64/__unmapself.s	2018-01-30 15:40:59.809375664 -0800
@@ -4,7 +4,11 @@
 .type   __unmapself,@function
 __unmapself:
 	movl $11,%eax   /* SYS_munmap */
-	syscall         /* munmap(arg2,arg3) */
+	pushq %rbx
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
+	popq %rbx
 	xor %rdi,%rdi   /* exit() args: always return success */
 	movl $60,%eax   /* SYS_exit */
-	syscall         /* exit(0) */
+	movq syscalldb@GOTPCREL(%rip), %rbx
+	call *%rbx
diff -ruNp musl-1.1.16/tools/musl-gcc.specs.sh musl-1.1.16.new/tools/musl-gcc.specs.sh
--- musl-1.1.16/tools/musl-gcc.specs.sh	2016-12-31 19:27:17.000000000 -0800
+++ musl-1.1.16.new/tools/musl-gcc.specs.sh	2018-01-30 15:40:07.433764944 -0800
@@ -23,7 +23,7 @@ libgcc.a%s %:if-exists(libgcc_eh.a%s)
 %{shared|pie:crtendS.o%s;:crtend.o%s} $libdir/crtn.o
 
 *link:
--dynamic-linker $ldso -nostdlib %{shared:-shared} %{static:-static} %{rdynamic:-export-dynamic}
+-L$libdir/../../../Runtime -lpal -lsysdb -dynamic-linker $ldso -nostdlib %{shared:-shared} %{static:-static} %{rdynamic:-export-dynamic}
 
 *esp_link:
 
